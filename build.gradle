plugins {
    id("org.jetbrains.kotlin.jvm") version "$kotlinVersion"
    id("org.jetbrains.kotlin.kapt") version "$kotlinVersion"
    id("org.jetbrains.kotlin.plugin.allopen") version "$kotlinVersion"
    id("org.jetbrains.kotlin.plugin.jpa") version "$kotlinVersion"
    id("groovy") // Spock tests
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.2"
    id("com.google.cloud.tools.jib") version "2.6.0"
    id 'idea' // Download sources
}

version = "0.1"
group = "de.dhbw.askme"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("de.dhbw.*")
    }
}

dependencies {
    compileOnly("jakarta.persistence:jakarta.persistence-api:2.2.2")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation "io.micronaut:micronaut-management"

    // GraalVM
    compileOnly "org.graalvm.nativeimage:svm"

    // OpenAPI support
    kapt "io.micronaut.openapi:micronaut-openapi"
    implementation "io.swagger.core.v3:swagger-annotations"

    // Kotlin
    implementation "io.micronaut.kotlin:micronaut-kotlin-runtime"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut.kotlin:micronaut-kotlin-extension-functions"

    // Database
    kapt "io.micronaut.data:micronaut-data-processor"
    implementation "io.micronaut.flyway:micronaut-flyway"
    implementation "io.micronaut.sql:micronaut-jdbc-dbcp"
    implementation "io.micronaut.data:micronaut-data-jdbc"
    implementation "io.micronaut.cache:micronaut-cache-ehcache"
    runtimeOnly "com.h2database:h2"

    // Http client
    implementation "io.micronaut:micronaut-http-client"

    // Logging
    runtime "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
}


application {
    mainClass.set("de.dhbw.askme.Application")
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

java {
    sourceCompatibility = JavaVersion.toVersion("$javaVersion")
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "$javaVersion"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "$javaVersion"
        }
    }

    jib {
        to {
            image = "gcr.io/myapp/jib-image"
        }
    }
}

/*
// GraalVM
nativeImage {
    args('--verbose',
            '--initialize-at-build-time=org.apache.logging.slf4j',
            '--initialize-at-build-time=org.apache.logging.log4j',
            '--initialize-at-build-time=com.sun.org.apache.xerces',
            '--initialize-at-build-time=java.beans',
            '--initialize-at-build-time=com.sun.jmx.mbeanserver',
            '--initialize-at-build-time=com.sun.jmx.defaults',
            '--initialize-at-build-time=jdk.management.jfr',
            '--features=org.graalvm.home.HomeFinderFeature',
            '--initialize-at-build-time=com.oracle.truffle.js.scriptengine'
    )
}
*/

// Download sources
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
